# stimulus sets for main study
pilotFinalSetsDf <- read_excel(file.path(file_path, "pilot","pilotFinalSetsDf.xlsx")) %>%
mutate(emotion = factor(emotion),
Name = factor(Name),
lureType = factor(lureType, levels = c("new","sem","per"),
labels = c("unrelated","semantically related","perceptually related")),
ratingScale = factor(ratingScale, levels = c("Per","Sem"),
labels = c("perceptual relatedness", "semantic relatedness"))) %>%
aggregate(rating ~ Name + emotion + lureType + ratingScale, FUN = mean)
# READ IN DATA####
# path settings####
# set working directory to where this script is stored
#rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd() # check
# read in data from /data
file_path <- file.path("../data") #run first the line above
# main study ####
# control analyses
controlDf <- read_csv(file.path(file_path, "behav", "controlMeasuresDf.csv"))%>%
mutate(delay = factor(delay),
gender = factor(gender),
Name = factor(Name))
# main study ####
# control analyses
controlDf <- read_csv(file.path(file_path, "behav", "controlMeasuresDf.csv"))%>%
mutate(delay = factor(delay),
gender = factor(gender),
Name = factor(Name))
controlDf$delay <- factor(controlDf$delay, levels=c("1", "28"), labels=c("1d","28d"))
# behavioral data
behavDf <- read_excel(file.path(file_path, "behav","behavDf.xlsx")) %>%
mutate(emotion = factor(emotion, levels = c("neutral","negative")),
delay = factor(delay))
# model RSA data
modelRSADf <- read_excel(file.path(file_path, "neuro", 'modelRSADf.xlsx')) %>%
mutate(emotion = factor(emotion, levels=c('neutral','negative')),
Name = factor(Name),
model = factor(model),
delay = factor(delay))
# main study ####
# control analyses
controlDf <- read_csv(file.path(file_path, "behav", "controlMeasuresDf.csv"))%>%
mutate(delay = factor(delay),
gender = factor(gender),
Name = factor(Name))
controlDf$delay <- factor(controlDf$delay, levels=c("1", "28"), labels=c("1d","28d"))
# behavioral data
behavDf <- read_excel(file.path(file_path, "behav","behavDf.xlsx")) %>%
mutate(emotion = factor(emotion, levels = c("neutral","negative")),
delay = factor(delay))
# model RSA data
modelRSADf <- read_excel(file.path(file_path, "neuro", 'modelRSADf.xlsx')) %>%
mutate(emotion = factor(emotion, levels=c('neutral','negative')),
Name = factor(Name),
model = factor(model),
delay = factor(delay))
# reinstatement data
reinstatementDf <- read_excel(file.path(file_path, "neuro", "reinstatementDf.xlsx")) %>%
mutate(delay = factor(delay),
emotion = factor(emotion, levels=c('neutral','negative')),
Name = factor(Name))
# sociodemography
pilotDemoBeforeExclusionDf <- read_excel(file.path(file_path, "pilot","pilotDemoDf.xlsx")) %>%
mutate(gender = factor(gender))
# all stimulus sets in pilot
pilotAllSetsDf <- read_excel(file.path(file_path, "pilot","pilotAllSetsDf.xlsx")) %>%
mutate(emotion = factor(emotion),
Name = factor(Name),
lureType = factor(lureType, levels = c("new","sem","per")))
# stimulus sets for main study
pilotFinalSetsDf <- read_excel(file.path(file_path, "pilot","pilotFinalSetsDf.xlsx")) %>%
mutate(emotion = factor(emotion),
Name = factor(Name),
lureType = factor(lureType, levels = c("new","sem","per"),
labels = c("unrelated","semantically related","perceptually related")),
ratingScale = factor(ratingScale, levels = c("Per","Sem"),
labels = c("perceptual relatedness", "semantic relatedness"))) %>%
aggregate(rating ~ Name + emotion + lureType + ratingScale, FUN = mean)
font_add_google("Encode Sans Condensed", "Encode Sans Condensed")
showtext.auto()
dodge = 0.15
my_theme <- theme_classic()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_blank(),
plot.title = element_text(hjust = 0.5, size=35, family = "Encode Sans Condensed"),
axis.title.y=element_text(size=28, family="Encode Sans Condensed"),
axis.text.y = element_text(size = 26, colour="black", family = "Encode Sans Condensed"),
axis.title.x=element_text(size=28, family = "Encode Sans Condensed"),
axis.text.x = element_text(size = 28, colour="black", family="Encode Sans Condensed"),
legend.title = element_text(size = 28, family = "Encode Sans Condensed"),
legend.text = element_text(size = 26, family = "Encode Sans Condensed"),
axis.line =  element_line(linewidth=1.75),
axis.ticks = element_line(linewidth=1.75, colour="black"),
axis.ticks.length = unit(.2,"cm"),
strip.text = element_text(size=28, family = "Encode Sans Condensed"),
strip.background=element_rect(color="white"))
# EMOTIONAL ENHANCEMENT OF IMMEDIATE FREE RECALL (DAY 1)####
# prepare data ####
freeRecallDf <- aggregate(freeRecall ~ Name + delay + emotion, FUN = sum,
na.rm = TRUE, na.action = na.pass,
subset(behavDf, itemType == 'old'))%>%
mutate(freeRecall = freeRecall / 30 * 100) # get percent
meanDf <- aggregate(freeRecall ~ Name + delay, FUN = sum,
na.rm = TRUE, na.action = na.pass,
subset(behavDf, itemType == 'old'))%>%
mutate(freeRecall = freeRecall / 60 * 100) # get percent
View(freeRecallDf)
install.packages("openxlsx")
library(openxlsx)
# CREATE SOURCE DATA FILE ####
wb <- createWorkbook("source_data.xlsx")
# add to source_data
addWorksheet(wb, "SupplementaryFigure1")
# Write the data into sheet
writeData(wb, "SupplementaryFigure1", freeRecallDf)
# Save the workbook
saveWorkbook(wb, "source_data.xlsx")
# add to source_data
addWorksheet(wb, "Figure1A_left")
# Write the data into sheet
writeData(wb, "Figure1A_left", oldsDf)
# DELAY DEPENDENT INCREASE IN HITS OVER TIME (DAY 2) #####
# prepare data####
# reduce dataframe
oldsDf <- aggregate(cbind(hit, miss, missedResponse) ~ Name + delay + emotion,
FUN = sum, na.rm = TRUE, na.action = na.pass,
data = subset(behavDf, itemType == 'old'))
# compute percent
oldsDf[,c("hit","miss","missedResponse")] <- oldsDf[,c("hit","miss"
,"missedResponse")] /30*100
# add to source_data
addWorksheet(wb, "Figure1A_left")
# Write the data into sheet
writeData(wb, "Figure1A_left", oldsDf)
# Supplementary Table 1 ####
# old items
# reduce data frame
oldRawDf <- aggregate(cbind(hit, miss, missedResponse) ~ Name + delay + emotion, FUN = sum,
na.rm = TRUE, na.action = na.pass,
data = subset(behavDf, itemType == 'old'))
# Supplementary Table 1 ####
# old items
# reduce data frame
oldRawDf <- aggregate(cbind(hit, miss, missedResponse) ~ Name + delay + emotion, FUN = sum,
na.rm = TRUE, na.action = na.pass,
data = subset(behavDf, itemType == 'old'))
# show descriptive statistics for old items
psych::describeBy(cbind(hit, miss, missedResponse) ~ emotion + delay,
data = oldRawDf)
# add to source_data
addWorksheet(wb, "SupplementaryTable2_old")
# Write the data into sheet
writeData(wb, "SupplementaryTable2_old", oldRawDf)
# lures
# reduce data frame
luresRawDf <- aggregate(cbind(FA, CR, missedResponse) ~ Name + delay + emotion + itemType,
FUN = sum, na.rm = TRUE, na.action = na.pass,
data = subset(behavDf, itemType != 'old'))
# Write the data into sheet
writeData(wb, "SupplementaryTable2_lures", luresRawDf)
# add to source_data
addWorksheet(wb, "SupplementaryTable2_lures")
# Write the data into sheet
writeData(wb, "SupplementaryTable2_lures", luresRawDf)
# Save the workbook
saveWorkbook(wb, "source_data.xlsx")
# Save the workbook
saveWorkbook(wb, "source_data.xlsx")
# Write the data into sheet
subset_df <- subset(freeRecallDf, select = c("Name", "delay", "emotion", "hit"))
View(freeRecallDf)
# Write the data into sheet
subset_df <- subset(oldsDf, select = c("Name", "delay", "emotion", "hit"))
writeData(wb, "Figure1A_left", subset_df)
writeData(wb, "Figure1A_left", subset_df)
# Write the data into sheet
writeData(wb, "SupplementaryTable2_old", oldRawDf)
# DELAY DEPENDENT INCREASE IN FALSE ALARMS SPECIFICALLY FOR SEMANTICALLY RELATED LURES (DAY 2) ####
# prepare data ####
# reduce dataframe
luresDf <- aggregate(FA ~ Name + delay + emotion + itemType, FUN = sum,
na.rm = TRUE, na.action = na.pass,
data = subset(behavDf, itemType != 'old'))%>% # take only lures
mutate(FA = FA /30*100,# get percent
lureType = factor(itemType, levels = c("new","per","sem"))) #new=unrelated, #per=perceptually related, #sem=semantically related
View(luresDf)
# Write the data into sheet
subset_df <- subset(luresDf, select = -itemType)
View(subset_df)
writeData(wb, "Figure2A_right", subset_df)
# Supplementary Results #####
# false alarms weighted by confidence ####
# preprare data
luresWeightedDf <- subset(behavDf, itemType != 'old') %>% # take only lures
aggregate(FA_weighted ~ Name + delay + emotion + itemType,
FUN = sum, na.rm = TRUE, na.action = na.pass) %>%
mutate(FA = FA_weighted/60*100, # compute percent
lureType = factor(itemType, levels = c("new","per","sem")) )
# Write the data into sheet
subset_df <- subset(luresWeightedDf)
View(subset_df)
# Write the data into sheet
subset_df <- subset(luresWeightedDf, select = -c(itemType,FA))
View(subset_df)
# Write the data into sheet
subset_df <- luresWeightedDf[, c("Name", "delay", "emotion", "lureType","FA_weighted")]
# Rename the levels of the "lureType" variable using fct_relevel()
subset_df$lureType <- fct_relevel(subset_df$lureType, "per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Rename the levels of the "lureType" variable using fct_relevel()
subset_df$lureType <- fct_relevel(subset_df$lureType, "perceptually related" = "per", "semantically related" = "sem", "unrelated" = "new")
View(subset_df)
View(subset_df)
View(subset_df)
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
# Rename the levels of the "lureType" variable using fct_relevel()
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
View(subset_df)
# Write the data into sheet
subset_df <- luresWeightedDf[, c("Name", "delay", "emotion", "lureType","FA_weighted")]
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
writeData(wb, "SupplementaryFigure6", subset_df)
# add to source_data
addWorksheet(wb, "SupplementaryFigure6")
writeData(wb, "SupplementaryFigure6", subset_df)
# Write the data into sheet
subset_df <- subset(luresDf, select = -itemType)
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
# add to source_data
addWorksheet(wb, "SupplementaryFigure6")
writeData(wb, "SupplementaryFigure6", subset_df)
# add to source_data
addWorksheet(wb, "Figure2A_right")
writeData(wb, "Figure2A_right", subset_df)
# MEMORY SPECIFICITY ON THE LEVEL OF EACH INDIVIDUAL RELATED STIMULUS SET #####
# prepare data ####
# reduce data frame without aggregating
transformationDf <- subset(behavDf, itemType == "old") %>%
dplyr::select ("Name", "set", "delay", "emotion", "detailed", "forgotten",
"semOnly_transformed", "perOnly_transformed") %>%
mutate(detailed = factor(detailed),
forgotten = factor(forgotten),
semOnly_transformed = factor(semOnly_transformed),
perOnly_transformed = factor(perOnly_transformed),
set = factor(set) )
# prepare smaller df for plotting and descriptive statistics in perc
smaller_transformationDf <- subset(behavDf, itemType == "old") %>%
dplyr::select ("Name", "set", "delay", "emotion", "detailed", "forgotten",
"semOnly_transformed", "perOnly_transformed") %>%
mutate(detailed = as.numeric(detailed),
forgotten = as.numeric(forgotten),
semOnly_transformed = as.numeric(semOnly_transformed),
perOnly_transformed = as.numeric(perOnly_transformed)) %>%
aggregate(cbind(detailed, forgotten, semOnly_transformed,
perOnly_transformed) ~ Name + delay + emotion,
FUN = sum, na.rm = TRUE, na.action = na.pass)
# Figure 2B ######
# prepare data
# prepare for connected individual data points
smaller_transformationDf[,c("detailed", "forgotten",
"semOnly_transformed",
"perOnly_transformed")] <- smaller_transformationDf[,c("detailed",
"forgotten", "semOnly_transformed",
"perOnly_transformed")] / 30 *100
# write into source_data ####
# Write the data into sheet
subset_df <- subset(smaller_transformationDf)
# Define a named character vector of old and new level names
level_names <- c("semOnly_transformed" = "semantically transformed", "perOnly_transformed" = "perceptually transformed")
subset_df <- rename(smaller_transformationDf, semantically_transformed = semOnly_transformed, perceptually_transformed = perOnly_transformed)
subset_df <- rename(smaller_transformationDf, semantically_transformed = semOnly_transformed, perceptually_transformed = perOnly_transformed)
# write into source_data ####
# Write the data into sheet
subset_df <- subset(smaller_transformationDf)
# write into source_data ####
# Write the data into sheet
subset_df <- smaller_transformationDf %>%
rename(semOnly_transformed = semantically_transformed, perOnly_transformed = perceptually_transformed)
# write into source_data ####
# Write the data into sheet
subset_df <- smaller_transformationDf %>%
dplyr::rename(semOnly_transformed = semantically_transformed, perOnly_transformed = perceptually_transformed)
View(smaller_transformationDf)
# write into source_data ####
# Write the data into sheet
subset_df <- smaller_transformationDf %>%
dplyr::rename(semantically_transformed = semOnly_transformed, perceptually_transformed = perOnly_transformed)
# write into source_data ####
# Write the data into sheet
subset_df <- smaller_transformationDf %>%
dplyr::rename(semantically_transformed = semOnly_transformed, perceptually_transformed = perOnly_transformed) %>%
dplyr::select(Name, delay, emotion, perceptually_transformed, semantically_transformed, forgotten, detailed)
# add to source_data
addWorksheet(wb, "Figure2B")
writeData(wb, "Figure2B", subset_df)
# RELATEDNESS RATING ON DAY 3####
# prepare data ####
smaller_simRatingsDf <- subset(behavDf, itemType != "old") %>%
aggregate(cbind(percRating, semRating) ~ Name + delay + emotion + itemType,
FUN = mean) %>%
mutate(lureType = factor(itemType))
# over emotion and delay
meanDf <- aggregate(cbind(percRating, semRating) ~ Name + lureType,
FUN = function(x) mean(x, na.rm = TRUE),
data = smaller_simRatingsDf)
# RELATEDNESS RATING ON DAY 3####
# prepare data ####
smaller_simRatingsDf <- subset(behavDf, itemType != "old") %>%
aggregate(cbind(percRating, semRating) ~ Name + delay + emotion + itemType,
FUN = mean) %>%
mutate(lureType = factor(itemType))
View(smaller_simRatingsDf)
# Write source_data ####
subset_df <- smaller_simRatingsDf[, c("Name", "delay", "emotion", "percRating","semRating")]
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
View(subset_df)
# Write source_data ####
subset_df <- smaller_simRatingsDf[, c("Name", "delay", "emotion", "lureType","percRating","semRating")]
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
# Write source_data ####
subset_df <- smaller_simRatingsDf %>%
dplyr::rename(perceptual_relatedness = percRating, semantic_relatedness = semRating) %>%
dplyr::select(Name, delay, emotion, lureType, perceptual_relatedness, semantic_relatedness)
#[, c("Name", "delay", "emotion", "lureType","percRating","semRating")]
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
addWorksheet(wb, "SupplementaryTable1")
writeData(wb, "SupplementaryTable1", subset_df)
# Write into source_data ####
meanDf <- aggregate(cbind(percRating, semRating) ~ Name + lureType,
FUN = function(x) mean(x, na.rm = TRUE),
data = smaller_simRatingsDf)
View(meanDf)
subset_df <- meanDf %>%
dplyr::rename(perceptual_relatedness = percRating, semantic_relatedness = semRating) #%>%
#dplyr::select(Name, delay, emotion, lureType, perceptual_relatedness, semantic_relatedness)
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
writeData(wb, "Figure2_left", subset_df)
addWorksheet(wb, "Figure2_left")
writeData(wb, "Figure2_left", subset_df)
# Write into source_data ####
subset_df <- smaller_simRatingsDf %>%
dplyr::rename(perceptual_relatedness = percRating, semantic_relatedness = semRating) %>%
dplyr::select(Name, delay, emotion, lureType, perceptual_relatedness, semantic_relatedness)
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
addWorksheet(wb, "SupplementaryFigure3")
writeData(wb, "SupplementaryFigure3", subset_df)
# INCREASE IN PROBABILITY FOR A FALSE ALARM ON DAY 2 DEPENDING ON RELATEDNESS RATING ON DAY 3 ####
# prepare data ####
# long file for LMM
simRatingsDf <- subset(behavDf, itemType != "old") %>%
select("Name", "set", "stimulusTypeNum", "delay", "emotion",
"itemType", "FA", "semRating", "percRating") %>%
mutate(lureType = factor(itemType, levels=c("new","sem","per")))
simRatingsDf_1d <- simRatingsDf %>%
filter(delay == '1d')
simRatingsDf_1d$semRatingGroupMeanCent <- scale(simRatingsDf_1d$semRating, scale=FALSE)
simRatingsDf_1d$percRatingGroupMeanCent <- scale(simRatingsDf_1d$percRating, scale=FALSE)
simRatingsDf_28d <- simRatingsDf %>%
filter(delay == '28d')
simRatingsDf_28d$semRatingGroupMeanCent <- scale(simRatingsDf_28d$semRating, scale=FALSE)
simRatingsDf_28d$percRatingGroupMeanCent <- scale(simRatingsDf_28d$percRating, scale=FALSE)
simRatingsDf <- rbind(simRatingsDf_1d, simRatingsDf_28d)
# Write into source_data ####
subset_df <- simRatingsDf #%>%
# Write into source_data ####
subset_df <- simRatingsDf %>%
dplyr::rename(perceptual_relatedness_centered = percRatingGroupMeanCent, semantic_relatedness_centered = semRatingGroupMeanCent) %>%
#dplyr::select(Name, delay, emotion, lureType, perceptual_relatedness, semantic_relatedness)
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Write into source_data ####
subset_df <- simRatingsDf %>%
dplyr::rename(perceptual_relatedness_centered = percRatingGroupMeanCent, semantic_relatedness_centered = semRatingGroupMeanCent) #%>%
# Write into source_data ####
subset_df <- simRatingsDf %>%
dplyr::rename(perceptual_relatedness_centered = percRatingGroupMeanCent, semantic_relatedness_centered = semRatingGroupMeanCent, lureType = itemType) %>%
dplyr::select(Name, delay, emotion, lureType, stimulusTypeNum, perceptual_relatedness_centered, semantic_relatedness_centered)
# Write into source_data ####
subset_df <- simRatingsDf %>%
dplyr::rename(perceptual_relatedness_centered = percRatingGroupMeanCent, semantic_relatedness_centered = semRatingGroupMeanCent) %>%
dplyr::select(Name, delay, emotion, lureType, stimulusTypeNum, perceptual_relatedness_centered, semantic_relatedness_centered)
# Define a named character vector of old and new level names
level_names <- c("per" = "perceptually related", "sem" = "semantically related", "new" = "unrelated")
# Use the plyr package's mapvalues function to rename levels
subset_df$lureType <- plyr::mapvalues(subset_df$lureType, from = names(level_names), to = level_names)
writeData(wb, "Figure2C_right", subset_df)
addWorksheet(wb, "Figure2C_right")
writeData(wb, "Figure2C_right", subset_df)
# Save the workbook
saveWorkbook(wb, "source_data.xlsx")
# MODEL-BASED REPRESENTATIONAL-SIMILARITY ANALYSIS####
# HIPPOCAMPAL LONG AXIS ####
# LEFT HIPPOCAMPUS ######
# prepare data ####
longaxisL_modelRSADf <- modelRSADf %>%
dplyr::select(Name, model, emotion, delay,
anteriorHC_L, posteriorHC_L) %>%
pivot_longer(cols = c(anteriorHC_L, posteriorHC_L),
names_to = "longaxis",
values_to = "fit") %>%
mutate(longaxis = factor(longaxis))
# test influence of outliers #####
# look for outliers ####
data <- modelRSADf %>%
group_by(Name) %>%
dplyr::select(Name, model, emotion, delay, anteriorHC_L, posteriorHC_L)
#anterior HC
#model 1
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"][log1] = 999
#model 2
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"][log1] = 999
#model 3
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]  > (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"])+3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]))|  data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]  < (mean(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"])+ (-3*sd(data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]))))
data$anteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"][log1] = 999
log1 <- which(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]  > (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"])+3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]))|  data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]  < (mean(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"])+ (-3*sd(data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]))))
data$anteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"][log1] = 999
#posterior HC
#model 1
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model1"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model1"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model1"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model1"][log1] = 999
#model 2
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model2"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model2"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model2"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model2"][log1] = 999
#model 3
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "neutral" & data$model == "model3"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "neutral" & data$model == "model3"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]  > (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"])+3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]))|  data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]  < (mean(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"])+ (-3*sd(data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"]))))
data$posteriorHC_L[data$delay == "1d" & data$emotion == "negative" & data$model == "model3"][log1] = 999
log1 <- which(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]  > (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"])+3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]))|  data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]  < (mean(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"])+ (-3*sd(data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"]))))
data$posteriorHC_L[data$delay == "28d" & data$emotion == "negative" & data$model == "model3"][log1] = 999
# Figure 3B ####
#drop outlier for whole plot as it is also dropped for the ANOVA
#don't run this line if you want to see data with outlier
data<-data[!(data$Name=="sj07"),]
# save to source_data #####
subset_df <- data #%>%
dplyr::rename(anterior_hippocampus = anteriorHC_L, posterior_hippocampus = posteriorHC_L) #%>%
View(data)
# save to source_data #####
subset_df <- data %>%
dplyr::rename(anterior_hippocampus = anteriorHC_L, posterior_hippocampus = posteriorHC_L) #%>%
addWorksheet(wb, "Figure3B")
writeData(wb, "Figure3B", subset_df)
# RIGHT HIPPOCAMPUS ####
# prepare data ####
longaxisR_modelRSADf <- modelRSADf %>%
dplyr::select(Name, model, emotion, delay,
anteriorHC_R, posteriorHC_R) %>%
pivot_longer(cols = c(anteriorHC_R, posteriorHC_R),
names_to = "longaxis",
values_to = "fit") %>%
mutate(longaxis = factor(longaxis))
#
subset_df <- behavDf
